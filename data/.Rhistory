whole.data.rename(data = whole_data, firstchar = "t", suffix = ".t")
whole.data.rename(data = whole_data, firstchar = "k", suffix = ".k")
whole.data.rename(data = whole_data, firstchar = "n", suffix = ".n")
names(whole_data)
n_occur <- data.frame(table(whole_data$henkilotunnus))
sum(n_occur == 4)
whole_data$d15scor.t
whole_data$cost
whole_data$cost.n
whole_data$d15scor.k
which(outcome_ll$bmi.k > 100)
if (getwd() == "/Users/pecsi_max/Desktop/Lokakuu 2017") {
print("jee!")} else {
setwd("/Users/pecsi_max/Desktop/Lokakuu 2017")}
kliin_comor <- kliin[ grep("DM", colnames(kliin)):grep("astma", colnames(kliin)) ]
kliin_comor[ is.na(kliin_comor) ] <- 0
kliin[ grep("DM", colnames(kliin)):grep("astma", colnames(kliin)) ] <- kliin_comor
kliin <- kliin %>% rename(henkilotunnus = sotu) %>%
mutate(henkilotunnus = toupper(henkilotunnus))
kliin <- (arrange(kliin, henkilotunnus))
whole_data <- arrange(whole_data, henkilotunnus)
whole_data
all_data <- left_join(whole_data, kliin, by = "henkilotunnus")
all_data
inds <- which(all_data$tmp == 3)
all_data[inds,]$tmp.1
all_data
whole_data
whole_data
whole_data$cost
remove.suffix <- function(data, suffix) {
data %>%
rename_at(.vars = vars(ends_with(suffix)),
.funs = funs(sub(paste0(suffix, "$"), "", .)))
}
remove.suffix(data=whole_data_n, suffix = ".n")
whole_data_y <- whole_data %>%
dplyr::select(henkilotunnus:D15SCORE, date:measurement) %>%
rename(d15score = D15SCORE)
names(whole_data_y)[7:36] <- tolower(names(whole_data_y)[7:36])
colnames(whole_data_y)
whole_data_t <- whole_data %>%
dplyr::select(henkilotunnus, id, age, gender, ends_with(".t")) %>%
remove.suffix(., suffix = ".t") %>%
rename(d15score = d15scor)
whole_data_k <- whole_data %>%
dplyr::select(henkilotunnus, id, age, gender, ends_with(".k")) %>%
remove.suffix(., suffix = ".k") %>%
rename(d15score = d15scor)
whole_data_n <- whole_data %>%
dplyr::select(henkilotunnus, id, age, gender, ends_with(".n")) %>%
remove.suffix(., suffix = ".n") %>%
rename(d15score = d15scor)
complete_data <- bind_rows(whole_data_y, whole_data_t, whole_data_k, whole_data_n, .id = "timepoint")
n_occur <- data.frame(table(whole_data$henkilotunnus))
sum(n_occur == 4)
cha
colnames(cha)
n_occur <- data.frame(table(whole_data$henkilotunnus))
d15data[173:179,]
d15data_original[173:179,]
fat_wide %>%
dplyr::filter(henkilotunnus == "191168-xxxx")
sama1 <- dplyr::filter(whole_data, grepl("250355-1109", henkilotunnus))
sama2 <- dplyr::filter(whole_data, grepl("191168-114B", henkilotunnus))
sama3 <- dplyr::filter(whole_data, grepl("250375-210N", henkilotunnus))
sama4 <- dplyr::filter(whole_data, grepl("120474-057W", henkilotunnus))
uniq1 <- sama1[3,]
uniq2 <- sama2[1,]
uniq3 <- sama3[2,]
uniq4 <- sama4[2,]
whole_data <- whole_data %>%
dplyr::filter(henkilotunnus != "250355-1109") %>%
dplyr::filter(henkilotunnus != "191168-114B") %>%
dplyr::filter(henkilotunnus != "250375-210N") %>%
dplyr::filter(henkilotunnus != "120474-057W") %>%
bind_rows(., uniq1, uniq2, uniq3, uniq4)
whole_data
which(whole_data$bmi.k > 100)
which(whole_data$bmi > 100)
which(whole_data$bmi.t > 100)
which(whole_data$bmi.n > 100)
kliin_comor <- kliin[ grep("DM", colnames(kliin)):grep("astma", colnames(kliin)) ]
kliin_comor[ is.na(kliin_comor) ] <- 0
kliin[ grep("DM", colnames(kliin)):grep("astma", colnames(kliin)) ] <- kliin_comor
kliin <- kliin %>% rename(henkilotunnus = sotu) %>%
mutate(henkilotunnus = toupper(henkilotunnus))
kliin <- (arrange(kliin, henkilotunnus))
whole_data <- arrange(whole_data, henkilotunnus)
whole_data
all_data <- left_join(whole_data, kliin, by = "henkilotunnus")
all_data
inds <- which(all_data$tmp == 3)
all_data[inds,]$tmp.1
outcome_ll <- all_data %>%
mutate(scoremuutos = d15scor.n - D15SCORE,
bmi_change = bmi.n - bmi,
bmi_meas_change = bmi.n - BMI) %>%
mutate(parlk = cut(scoremuutos,
breaks=c(-Inf, -0.035, -0.015, 0.015, 0.035, Inf),
labels = c("<-0.035", "<-0.015", "no change", ">+0.015", ">0.035")))
plot(outcome_ll$scoremuutos, outcome_ll$BMI)
lm(data = outcome_ll, scoremuutos ~ log(BMI=)
lm(data = outcome_ll, scoremuutos ~ log(BMI))
lm(data = outcome_ll, scoremuutos ~ log(BMI))
logmodel <- lm(data = outcome_ll, scoremuutos ~ log(BMI))
logmodel
summary(logmodel)
summary(model)
logmodel <- lm(data = outcome_ll, scoremuutos ~ (BMI)^2)
summary(logmodel)
logmodel <- lm(data = outcome_ll, scoremuutos ~ (BMI)
summary(logmodel)
summary(model)
summary(logmodel)
logmodel <- lm(data = outcome_ll, scoremuutos ~ (BMI))
summary(logmodel)
abline(model)
outcome_ll
outcome_ll$bmi
outcome_ll$absence
outcome_ll$absence.k
eyeball(groupers = "tmp")
eyeball <- function(data = outcome_ll, groupers) {
#find column indices for dplyr::select
colinds <- match(groupers, colnames(data))
int_data <- data %>%
dplyr::select(D15SCORE, d15scor.t, d15scor.k, d15scor.n, colinds) %>%
filter(!is.na(colinds)) %>%
gather(timepoint, d15_score, D15SCORE, d15scor.t, d15scor.k, d15scor.n)
#vaihda timet ja järjestys
#dimensioiden nimet kuntoon
mittausnimet <- c("D15SCORE", "d15scor.t", "d15scor.k", "d15scor.n")
mittausaikapisteet <- c("Baseline", "6 months", "12 months", "24 months")
int_data$timepoint <- mapvalues(int_data$timepoint,
to = mittausaikapisteet,
from = mittausnimet)
int_mean <- summarySE(data = int_data,
measurevar = "d15_score",
groupvars = c("timepoint", groupers),
na.rm = T)
#mittauspisteet fiksuun järjestykseen
int_mean <- int_mean %>%
mutate(timepoint = factor(timepoint, levels = mittausaikapisteet)) %>%
arrange(timepoint) %>%
mutate(yymin = d15_score - ci,
yymax = d15_score + ci)
#huom pos on global env.:ssa, nyt en jaksa sitä vaihtaa
ggplot(data=int_mean, aes_string(x = "timepoint", y = "d15_score",
ymin= "yymin",
ymax= "yymax",
group = as.factor(groupers) ,
col = as.factor(groupers))) +
geom_point(position = pos) +
geom_errorbar(aes(width = 0.2), position = pos) +
geom_line(position = pos) +
geom_label(aes(label=N), nudge_x = 0.2) +
theme(text = element_text(size=25))
}
eyeball(groupers = "tmp")
eyeball <- function(data = outcome_ll, groupers) {
#find column indices for dplyr::select
colinds <- match(groupers, colnames(data))
int_data <- data %>%
dplyr::select(D15SCORE, d15scor.t, d15scor.k, d15scor.n, colinds) %>%
filter(!is.na(colinds)) %>%
gather(timepoint, d15_score, D15SCORE, d15scor.t, d15scor.k, d15scor.n)
#vaihda timet ja järjestys
#dimensioiden nimet kuntoon
mittausnimet <- c("D15SCORE", "d15scor.t", "d15scor.k", "d15scor.n")
mittausaikapisteet <- c("Baseline", "6 months", "12 months", "24 months")
int_data$timepoint <- mapvalues(int_data$timepoint,
to = mittausaikapisteet,
from = mittausnimet)
int_mean <- summarySE(data = int_data,
measurevar = "d15_score",
groupvars = c("timepoint", groupers),
na.rm = T)
#mittauspisteet fiksuun järjestykseen
int_mean <- int_mean %>%
mutate(timepoint = factor(timepoint, levels = mittausaikapisteet)) %>%
arrange(timepoint) %>%
mutate(yymin = d15_score - ci,
yymax = d15_score + ci) %>%
mutate(!!groupers = as.factor(!!groupers))
#huom pos on global env.:ssa, nyt en jaksa sitä vaihtaa
ggplot(data=int_mean, aes_string(x = "timepoint", y = "d15_score",
ymin= "yymin",
ymax= "yymax",
group = groupers,
col = groupers)) +
geom_point(position = pos) +
geom_errorbar(aes(width = 0.2), position = pos) +
geom_line(position = pos) +
geom_label(aes(label=N), nudge_x = 0.2) +
theme(text = element_text(size=25))
}
eyeball(groupers = "tmp")
eyeball <- function(data = outcome_ll, groupers) {
#find column indices for dplyr::select
colinds <- match(groupers, colnames(data))
int_data <- data %>%
dplyr::select(D15SCORE, d15scor.t, d15scor.k, d15scor.n, colinds) %>%
filter(!is.na(colinds)) %>%
gather(timepoint, d15_score, D15SCORE, d15scor.t, d15scor.k, d15scor.n)
#vaihda timet ja järjestys
#dimensioiden nimet kuntoon
mittausnimet <- c("D15SCORE", "d15scor.t", "d15scor.k", "d15scor.n")
mittausaikapisteet <- c("Baseline", "6 months", "12 months", "24 months")
int_data$timepoint <- mapvalues(int_data$timepoint,
to = mittausaikapisteet,
from = mittausnimet)
int_mean <- summarySE(data = int_data,
measurevar = "d15_score",
groupvars = c("timepoint", groupers),
na.rm = T)
#mittauspisteet fiksuun järjestykseen
int_mean <- int_mean %>%
mutate(timepoint = factor(timepoint, levels = mittausaikapisteet)) %>%
arrange(timepoint) %>%
mutate(yymin = d15_score - ci,
yymax = d15_score + ci) %>%
mutate(!!groupers = as.factor(!!groupers))
#huom pos on global env.:ssa, nyt en jaksa sitä vaihtaa
ggplot(data=int_mean, aes_string(x = "timepoint", y = "d15_score",
ymin= "yymin",
ymax= "yymax",
group = groupers,
col = groupers)) +
geom_point(position = pos) +
geom_errorbar(aes(width = 0.2), position = pos) +
geom_line(position = pos) +
geom_label(aes(label=N), nudge_x = 0.2) +
theme(text = element_text(size=25))
}
eyeball <- function(data = outcome_ll, groupers) {
#find column indices for dplyr::select
colinds <- match(groupers, colnames(data))
int_data <- data %>%
dplyr::select(D15SCORE, d15scor.t, d15scor.k, d15scor.n, colinds) %>%
filter(!is.na(colinds)) %>%
gather(timepoint, d15_score, D15SCORE, d15scor.t, d15scor.k, d15scor.n)
#vaihda timet ja järjestys
#dimensioiden nimet kuntoon
mittausnimet <- c("D15SCORE", "d15scor.t", "d15scor.k", "d15scor.n")
mittausaikapisteet <- c("Baseline", "6 months", "12 months", "24 months")
int_data$timepoint <- mapvalues(int_data$timepoint,
to = mittausaikapisteet,
from = mittausnimet)
int_mean <- summarySE(data = int_data,
measurevar = "d15_score",
groupvars = c("timepoint", groupers),
na.rm = T)
#mittauspisteet fiksuun järjestykseen
int_mean <- int_mean %>%
mutate(timepoint = factor(timepoint, levels = mittausaikapisteet)) %>%
arrange(timepoint) %>%
mutate(yymin = d15_score - ci,
yymax = d15_score + ci) %>%
mutate(groupers = as.factor(groupers))
#huom pos on global env.:ssa, nyt en jaksa sitä vaihtaa
ggplot(data=int_mean, aes_string(x = "timepoint", y = "d15_score",
ymin= "yymin",
ymax= "yymax",
group = groupers,
col = groupers)) +
geom_point(position = pos) +
geom_errorbar(aes(width = 0.2), position = pos) +
geom_line(position = pos) +
geom_label(aes(label=N), nudge_x = 0.2) +
theme(text = element_text(size=25))
}
eyeball(groupers = "tmp")
outcome_ll$x7.RR
outcome_ll$x7.RR.t
outcome_ll$x7.RR.k
sum(outcome_ll$x7.RR.k, na.rm = T)
sum(outcome_ll$x7.RR.k == 3, na.rm = T)
sum(outcome_ll$x7.RR == 3, na.rm = T)
which(outcome_ll$x7.RR == 3)
which(outcome_ll$x7.RR.t == 3)
which(outcome_ll$x7.RR.k == 3)
rr_inds <- which(outcome_ll$x7.RR == 3)
rr_inds.t <-which(outcome_ll$x7.RR.t == 3)
rr_inds <- which(outcome_ll$x7.RR == 3)
rr_inds.t <-which(outcome_ll$x7.RR.t == 3)
rr_inds.k <-which(outcome_ll$x7.RR.k == 3)
rr_inds.n <-which(outcome_ll$x7.RR.n == 3)
rr_inds.n
whole_data
rr_inds <- which(whole_data$x7.RR == 3)
rr_inds.t <-which(whole_data$x7.RR.t == 3)
rr_inds.k <-which(whole_data$x7.RR.k == 3)
rr_inds.n <-which(whole_data$x7.RR.n == 3)
whole_data[,which(whole_data$x7.RR == 3)]
whole_data[which(whole_data$x7.RR == 3),]
whole_data[which(whole_data$x7.RR == 3),]$x7.RR
whole_data[which(whole_data$x7.RR == 3),]
whole_data[which(whole_data$x7.RR.t == 3),]
whole_data[which(whole_data$x7.RR.k == 3),]
whole_data[which(whole_data$x7.RR.n == 3),]
whole_data[which(whole_data$x7.RR.n == 3),]$x7.RR.n
whole_data[which(whole_data$x7.RR == 3),]$x7.RR
whole_data[which(whole_data$x7.RR.t == 3),]$x7.RR.t
whole_data[which(whole_data$x7.RR.k == 3),]$x7.RR.k
whole_data[which(whole_data$x7.RR.n == 3),]$x7.RR.n
whole_data[which(whole_data$x7.RR == 3),]$x7.RR <- 2
whole_data[which(whole_data$x7.RR.t == 3),]$x7.RR.t <- 2
whole_data[which(whole_data$x7.RR.k == 3),]$x7.RR.k <- 2
whole_data[which(whole_data$x7.RR.n == 3),]$x7.RR.n <- 2
whole_data[x7.RR == 3]
whole_data$x7.RR == 3
which(whole_data$x7.RR == 3)
which(whole_data$x7.RR.k == 3)
whole_data[which(whole_data$x7.RR == 0),]$x7.RR <- 1
whole_data[which(whole_data$x7.RR == 0),]$x7.RR <- 1
whole_data[which(whole_data$x7.RR.t == 0),]$x7.RR.t <- 1
whole_data[which(whole_data$x7.RR.k == 0),]$x7.RR.k <- 1
whole_data[which(whole_data$x7.RR.n == 0),]$x7.RR.n <- 1
whole_data[which(whole_data$x7DM == 3),]$x7DM <- 2
whole_data[which(whole_data$x7DM.t == 3),]$x7DM.t <- 2
whole_data[which(whole_data$x7DM.k == 3),]$x7DM.k <- 2
whole_data[which(whole_data$x7DM.n == 3),]$x7DM.n <- 2
whole_data[which(whole_data$x7DM == 0),]$x7DM <- 1
whole_data[which(whole_data$x7DM.t == 0),]$x7DM.t <- 1
whole_data[which(whole_data$x7DM.k == 0),]$x7DM.k <- 1
whole_data[which(whole_data$x7DM.n == 0),]$x7DM.n <- 1
whole_data$x7DM
whole_data$x7DM
all_data
all_data$leikkpvm
all_data$Vastauspvm
spss2date(all_data$Vastauspvm)
spss2date
all_data$leikkpvm
which(is.na(all_data$leikkpvm))
all_data[which(is.na(all_data$leikkpvm))]$henkilotunnus
all_data[which(is.na(all_data$leikkpvm)),]
all_data[which(is.na(all_data$leikkpvm)),]$henkilotunnus
fat_prob <- data.select.prob.plot(fat)
fat_prob <- data.select.prob.plot(fat)
data.select.prob.plot
fat
data.select.prob.plot <- function(data) {
intermediate_data <- NULL
length_valid <- sum(!is.na(data$scoremuutos))
intermediate_data <- data %>%
dplyr::select(scoremuutos) %>%
filter(!is.na(scoremuutos == T)) %>%
arrange(scoremuutos) %>%
mutate(order = rank(scoremuutos, ties.method="first")) %>%
mutate(c_prob = (order / length_valid)*100)
return(intermediate_data)
}
fat
fat_prob <- data.select.prob.plot(fat)
mat
alc
setwd("/Users/pecsi_max/Desktop/GitHub/IODS-project/data/")
path_mat <- file.choose()
path_mat <- file.choose()
path_mat
path_mat <- "/Users/pecsi_max/Desktop/GitHub/IODS-project/data/student-mat.csv"
path_alc <- "/Users/pecsi_max/Desktop/GitHub/IODS-project/data/student-por.csv"
mat <- read.csv2(path_mat)
alc <- read.csv2(path_alc)
glimpse(por)
glimpse(mat)
por <- read.csv2(path_por)
path_por <- "/Users/pecsi_max/Desktop/GitHub/IODS-project/data/student-por.csv"
por <- read.csv2(path_por)
mat <- read.csv2(path_mat)
por <- read.csv2(path_por)
glimpse(mat)
glimpse(por)
glimpse(mat)
join_by <- c("school", "sex", "age", "address", "famsize",
"Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason",
"nursery", "internet")
math_por <- inner_join(mat, por, by = join_by, suffix = c(".mat", ".por"))
math_por
join_by
colnames(math_por)
alc <- select(math_por, one_of(join_by))
alc
colnames(math_por)
alc <- select(math_por, one_of(join_by))
colnames(alc)
alc <- select(math_por, one_of(join_by))
math_por <- inner_join(mat, por, by = join_by, suffix = c(".mat", ".por"))
colnames(math_por)
alc <- select(math_por, one_of(join_by))
alc <- dplyr:.select(math_por, one_of(join_by))
alc <- dplyr::select(math_por, one_of(join_by))
colnames(alc)
colnames(math)[!colnames(math) %in% join_by]
colnames(mat)[!colnames(math) %in% join_by]
colnames(mat)[!colnames(mat) %in% join_by]
notjoined_columns <- colnames(mat)[!colnames(mat) %in% join_by]
notjoined_columns
colnames(math_por)
notjoined_columns
colnames(por)
colnames(mat)
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- dplyr::select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- dplyr::select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- dplyr::select(two_columns, 1)[[1]]
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
two_columns
first_column
two_columns, 1[[1]]
two_columns
select(two_columns, 1)[[1]]
dplyr::select(two_columns, 1)[[1]]
dplyr::select(two_columns, 2)[[1]]
dplyr::select(two_columns, 1)[[1]]
alc
colnames(alc)
alc %>%
mutate(alc_use = mean(Walc, Dalc, na.rm = T))
alc %>%
mutate(alc_use = mean(Walc, Dalc, na.rm = T))
alc %>%
mutate(alc_use = mean(Walc, Dalc))
alc %>%
mutate(alc_use = sum(Walc, Dalc))
alc %>%
mutate(alc_use = mean(Walc, Dalc))
alc <- alc %>%
mutate(alc_use = (Walc+Dalc) / 2) %>%
mutate(high_use = (alc_use > 2))
glimpse(alc)
write.csv(alc, file = "alcohol")
knitr::opts_chunk$set(echo = TRUE)
getwd()
path <- paste(getwd(), "data", "alcohol", sep = "/")
read.csv(path)
colnames(alc)
colnames(alc)
alc$high_use
alc$high_use
colnames(alc)
library(dplyr)
library(ggplot2)
alc %>% gather(-high_use)
alc %>% gather(., -high_use)
alc %>% gather(., high_use)
alc %>% gather()
alc %>% gather(key, value, -high_use)
alc %>% gather(key, value, -high_use) %>%
ggplot(., aes(x=value, y=high_use)) + geom_point()
alc %>% gather(key, value, -high_use) %>%
ggplot(., aes(x=value, y=high_use)) + geom_point() +
facet_wrap("key", scales = "free") + geom_bar()
alc %>% gather(key, value, -high_use) %>%
ggplot(., aes(x=value, group = high_use)) + geom_bar() +
facet_wrap("key", scales = "free") + geom_bar()
alc %>% gather(key, value, -high_use) %>%
ggplot(., aes(x=value, group = high_use, fill=high_use)) + geom_bar() +
facet_wrap("key", scales = "free") + geom_bar()
